Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
 
 Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
 
 -----------------------------------------------------------------------------------------------------------------------
 我的解答：（参考别人的）
 class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int max = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    max = Math.max(max,DFS(grid,i,j));
                    grid[i][j] = 0;                               //增添的部分
                }
            }
        }
        return max;
    }
    
    public int DFS(int[][] grid, int i,int j){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) return 0;
        grid[i][j] = 0;
        return 1 + DFS(grid,i-1,j) + DFS(grid,i+1,j) + DFS(grid,i,j-1) + DFS(grid,i,j+1);
    }
}
 
 用了深度优先遍历（递归），我在别人的基础上改进了，加了一句话。因为已经做过大陆检测的，肯定是把相连的全部都检测进去了，后面再重复检测那一块大陆没有意义。
