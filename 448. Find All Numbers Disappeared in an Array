Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

----------------------------------------------------------------------------------------------------------------------------
我的解答：
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        for(int i = 0; i < nums.length; i++){
            while(nums[i] != i+1 && nums[i] != 0){
                int temp = nums[i];
                int j = nums[i] - 1;
                if(nums[i] != nums[j]){
                    nums[i] = nums[j];
                    nums[j] = temp;
                }else{
                nums[i] = 0;
                }
            }            
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0) {
                list.add(i+1);
            }
        }
        return list;
    }
}

----------------------------------------------------------------------------------------------------------------------------
别人的解答-1：
public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < nums.length; i ++) nums[(nums[i]-1) % n] += n;
        for (int i = 0; i < nums.length; i ++) if (nums[i] <= n) res.add(i+1);
        return res;
    }
   
----------------------------------------------------------------------------------------------------------------------------
别人的解答-2：
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<Integer>();
        
        for(int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]) - 1;
            if(nums[val] > 0) {
                nums[val] = -nums[val];
            }
        }
        
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > 0) {
                ret.add(i+1);
            }
        }
        return ret;
    }
----------------------------------------------------------------------------------------------------------------------------
这几个解答都用了通过num[i]定位到nums[nums[i]-1]，再做操作的技巧。
我的解答将当前指向的数和第nums[i]个数互换位置，知道当前位置的值变成i+1;如果有重复的，就将当前位置设置为0。最后，有0的位就是不存在的数。
别人的解答-1和-2其实思路类似，都是将第nums[i]-1位做标记，表明该位对应的值存在；-1是将数位+n做标记；-2是变成负数做标记。
都是O(n)的时间复杂度，O(1)的空间复杂度。
    
